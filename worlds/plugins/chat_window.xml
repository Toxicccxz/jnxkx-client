<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
    <plugin
            name="chat_window"
            author="醉轻侯" id="b555825a4a5700c35fa80780"
            language="Lua" purpose="江南侠客行聊天窗口"
            save_state="y" date_written="2016-08-17 00:22:37"
            requires="4.94"
            version="1.0">
        <description trim="y">
            江南侠客行聊天窗口

            USAGE:

            chats echo on    : 主窗口展示频道信息
            chats echo off   : 主窗口不展示频道信息
            chats show       : 显示聊天窗口
            chats hide       : 隐藏聊天窗口
        </description>
    </plugin>

    <triggers>
        <trigger enabled="y"
                 match="^(&gt;)*( )*【闲聊】"
                 omit_from_output="y"
                 regexp="y"
                 script="chats"
                 sequence="100">
        </trigger>

        <trigger enabled="n"
                 match="^(&gt;)*( )*(你告诉|.+告诉你|你回答|.+回答你)"
                 omit_from_output="y"
                 regexp="y"
                 script="chats"
                 sequence="100">
        </trigger>

        <trigger enabled="y"
                 name="remort_auction"
                 match="^(&gt;)*( )*【(后记|号外|江湖逸事|天灾人祸)】"
                 regexp="y"
                 script="untaggedInfo"
                 omit_from_output="y"
                 sequence="100"></trigger>

        <trigger enabled="y"
                 name="global_quest"
                 match="^(&gt;)*( )*【(江湖|江湖谣传|塞外军情|鄱阳湖|洛阳城传闻|官府通告|任务|交易)】"
                 regexp="y"
                 script="untaggedInfo"
                 omit_from_output="y"
                 sequence="100"></trigger>

        <trigger enabled="y"
                 name="info"
                 match="^(&gt;)*( )*【(江湖传闻|游戏更新|北侠公告| 天色 |北侠QQ群|拍卖|醒目|表决|算命先生)】"
                 regexp="y"
                 script="untaggedInfo"
                 omit_from_output="y"
                 sequence="100"></trigger>

        <trigger enabled="y"
                 name="raidinfo"
                 match="^(&gt;)*( )*【(求助|新手)】"
                 regexp="y"
                 script="untaggedInfo"
                 omit_from_output="y"
                 sequence="100"></trigger>

        <trigger enabled="y"
                 name="claninfo"
                 match="^(&gt;)*( )*【谣言】"
                 regexp="y"
                 script="untaggedInfo"
                 omit_from_output="y"
                 sequence="100"></trigger>

        <trigger enabled="y"
                 name="baowei_info"
                 match="^(&gt;)*( )*【(大明|甲午战保|保卫|保卫襄阳|公告天下|密探回报|任务奖励)】"
                 regexp="y"
                 script="untaggedInfo"
                 omit_from_output="y"
                 sequence="100"></trigger>
    </triggers>

    <aliases>

        <alias script="updateEchoFlag"
               match="^chats echo( on| off)?$"
               enabled="y"
               regexp="y"
               sequence="100"
               ignore_case="y"></alias>

        <alias script="chatShow"
               match="chats show"
               enabled="y"
               sequence="100"
               ignore_case="y"></alias>

        <alias script="chatHide"
               match="chats hide"
               enabled="y"
               sequence="100"
               ignore_case="y"></alias>
    </aliases>

    <!--  Script  -->
    <script>
        <![CDATA[
require "movewindow"
require "serialize"
require "copytable"

---------------------------------------------------------------------------------
-- 参数初始化 开始

-- 引入颜色处理相关函数，比如 StylesToColoursOneLine,strip_colours
dofile(GetPluginInfo(GetPluginID(), 20) .. "jnxkx_colors.lua")

-- 窗口默认参数
local winParams = {
    pluginId,
    maxLines = 10000,
    width = 657,
    height = 131,
    x = 0,
    y = 0,
    startx = 0,
    starty = 0,
    -- date_format = "[%d %b %H:%M:%S] "   -- [30 Aug 13:29:49]   date and time 24 hour
    -- date_format = "[%d %b %I:%M:%S%p] " -- [30 Aug 01:20:12PM] date and time 12 hour
    -- date_format = "[%H:%M:%S] "         -- [13:29:08]          time 24 hour
    -- date_format = "[%X] "               -- [1:22:06 PM]        time 12 hour
    dateFormat = "[%d %b %H:%M:%S] ",
    -- 颜色
    backgroundColor = GetNormalColour(1),
    textColor = 0xffffff,
    borderColor = 0xE8E8E8,
    -- 文本边缘的间距
    textInset = 5,
    lastRefresh = 0,
    -- 默认显示信息
    echo = 1,
    -- 是否输入日志文件
    logTofile = 0,
    logTimestamps = 1,
    logColourCodes = 1,
    -- 日志最大行数
    logMaxLines = 10000,
    chatlines = {},  -- 最新频道信息
    rawChatlines = {},
    lineStart = 0,
    lineEnd = 0,
    copyStartLine = nil,
    copyEndLine = nil,
    startCopyingX = 0,
    endCopyingX = 0,
    -- 滚动条相关
    scrollBarWidth = 15,
    scrollBarHeight = 0,
    scrollBackgroundColor = 0xE8E8E8,
    scrollBarColor = 0x111111,
    scrollDetailColor = 0x000000,
    keepscrolling = "",
    barPos = "",
    barSize = "",
    totalSteps = "",
    hyperlinks = {}
}

local windowInfo = null

-- 参数初始化 结束
---------------------------------------------------------------------------------

---------------------------------------------------------------------------------
--- 插件需要响应的事件 开始

-- 插件第一次安装
function OnPluginInstall()
    -- 从上次保存的数据中恢复窗口参数
    --[[local paramsString = GetVariable("winParams")
    if paramsString ~= nil and paramsString ~= "" then
        winParams = assert(loadstring(paramsString))()
        winParams.init = true
    else
        -- 获得当前插件的唯一ID（24字符）
        winParams.pluginId = GetPluginID()
    end]]--
winParams.pluginId = GetPluginID()
    -- 创建假窗口，获取字体相关信息
    check(WindowCreate(winParams.pluginId, 0, 0, 1, 1, 0, 0, winParams.backgroundColor))

    -- 字体库
    local fonts = utils.getfontfamilies()
    if not fonts.Dina then
        AddFont(GetInfo(66) .. "\\Dina.fon")
        fonts = utils.getfontfamilies()
    end

    if fonts["Dina"] then
        winParams.fontSize = 8
        winParams.fontName = "Dina" -- the actual font
    elseif fonts["Courier New"] then
        winParams.fontSize = 8
        winParams.fontName = "Courier New"
    else
        winParams.fontSize = 8
        winParams.fontName = "Lucida Console"
    end

    winParams.chatFontId = "font" .. winParams.pluginId
    winParams.headerFontId = "fonthead" .. winParams.pluginId
    check(WindowFont(winParams.pluginId, winParams.chatFontId, winParams.fontName, winParams.fontSize))
    check(WindowFont(winParams.pluginId, winParams.headerFontId, winParams.fontName, winParams.fontSize - 1))

    winParams.chatFontHeight = WindowFontInfo(winParams.pluginId, winParams.chatFontId, 1) - WindowFontInfo(winParams.pluginId, winParams.chatFontId, 4) + 1
    winParams.headerFontHeight = WindowFontInfo(winParams.pluginId, winParams.headerFontId, 1) - WindowFontInfo(winParams.pluginId, winParams.headerFontId, 4) + 1

    winParams.chatLineHeight = winParams.chatFontHeight + 1
    winParams.titleHeight = winParams.headerFontHeight * 1.8

    windowInfo = movewindow.install(winParams.pluginId,
        miniwin.pos_top_right, miniwin.create_absolute_location,
        false,
        nil,
        { mouseup = MouseUp, mousedown = LeftClickOnly, dragmove = LeftClickOnly, dragrelease = LeftClickOnly },
        { x = winParams.x, y = winParams.y })

    drawWin(true)
end

-- 保存窗口状态
function OnPluginSaveState()
    movewindow.save_state(winParams.pluginId)
    -- 序列化winParams
    SetVariable("winParams", serialize.save("winParams", winParams) .. "\n return winParams")
end

-- 插件启用
function OnPluginEnable()
    OnPluginInstall()
end

-- 插件禁用
function OnPluginDisable()
    WindowShow(winParams.pluginId, false)
end

-- 插件需要响应的事件 结束
---------------------------------------------------------------------------------

---------------------------------------------------------------------------------
-- 函数定义 开始
function drawWin(firstTime)
    winParams.showLines = math.ceil((winParams.height - winParams.titleHeight) / winParams.chatLineHeight)

    if firstTime then
        WindowCreate(winParams.pluginId,
            windowInfo.window_left, windowInfo.window_top,
            winParams.width, winParams.height,
            windowInfo.window_mode, windowInfo.window_flags,
            winParams.backgroundColor)

        -- catch for right-click menu and line selection
        WindowAddHotspot(winParams.pluginId,
            "textarea", 1,
            winParams.titleHeight, winParams.width - winParams.scrollBarWidth - 1, winParams.height - 3,
            "", "", "MouseDown", "CancelMouseDown", "MouseUp", "", 2, 0)
        --WindowDragHandler(winParams.pluginId, "textarea", "TextareaMoveCallback", "TextareaReleaseCallback", 0x10)

        --WindowScrollwheelHandler(winParams.pluginId, "textarea", "wheel_move")


        -- 增加移动窗口的响应区
        movewindow.add_drag_handler(winParams.pluginId, 0, 0, 0, winParams.titleHeight)

        -- 移动窗口的事件
        WindowAddHotspot(winParams.pluginId, "resize",
            winParams.width - winParams.scrollBarWidth, winParams.height - winParams.scrollBarWidth,
            winParams.width, winParams.height,
            "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 6, 0)
        WindowDragHandler(winParams.pluginId, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
    else
        WindowResize(winParams.pluginId, winParams.width, winParams.height, winParams.backgroundColor)
        WindowMoveHotspot(winParams.pluginId, "textarea", 0, winParams.titleHeight, winParams.width - winParams.scrollBarWidth - 1, winParams.height - 3)
        WindowMoveHotspot(winParams.pluginId, "up", winParams.width - winParams.scrollBarWidth, winParams.titleHeight, 0, winParams.titleHeight + winParams.scrollBarWidth)
        WindowMoveHotspot(winParams.pluginId, "down", winParams.width - winParams.scrollBarWidth, winParams.height - (2 * winParams.scrollBarWidth), 0, winParams.height - winParams.scrollBarWidth)
        WindowMoveHotspot(winParams.pluginId, "resize", winParams.width - winParams.scrollBarWidth, winParams.height - winParams.scrollBarWidth, winParams.width, 0)
    end
    -- 显示窗口
    WindowShow(winParams.pluginId, true)

       winParams.lineStart = math.max(1, #(winParams.chatlines)-winParams.showLines+2)
   winParams.lineEnd = math.max(1, #(winParams.chatlines))

    -- 标题框
    winParams.headerWidth = WindowTextWidth(winParams.pluginId, winParams.headerFontId, "频道信息")
    WindowGradient(winParams.pluginId, 1, 0, winParams.width, winParams.titleHeight, winParams.backgroundColor, 0x444444, 2)
    WindowText(winParams.pluginId,
        winParams.headerFontId, "频道信息",
        (winParams.width - winParams.headerWidth) / 2, ((winParams.titleHeight - winParams.headerFontHeight) / 2) - 1, winParams.width, winParams.titleHeight,
        0xEEEEEE, false)
    WindowLine(winParams.pluginId, 0, winParams.titleHeight - 1, winParams.width, winParams.titleHeight - 1, winParams.borderColor, 0 + 0x0200, 1)

    -- 调整大小的图标
    WindowRectOp(winParams.pluginId, 2, winParams.width - winParams.scrollBarWidth, winParams.height - winParams.scrollBarWidth, 0, 0, winParams.scrollBackgroundColor)
    WindowLine(winParams.pluginId, winParams.width - winParams.scrollBarWidth + 1, winParams.height - 2, winParams.width - 2, winParams.height - winParams.scrollBarWidth + 1, 0xffffff, 0, 2)
    WindowLine(winParams.pluginId, winParams.width - winParams.scrollBarWidth + 2, winParams.height - 2, winParams.width - 2, winParams.height - winParams.scrollBarWidth + 2, 0x696969, 0, 1)
    WindowLine(winParams.pluginId, winParams.width - winParams.scrollBarWidth + 4, winParams.height - 2, winParams.width - 2, winParams.height - winParams.scrollBarWidth + 4, 0xffffff, 0, 2)
    WindowLine(winParams.pluginId, winParams.width - winParams.scrollBarWidth + 5, winParams.height - 2, winParams.width - 2, winParams.height - winParams.scrollBarWidth + 5, 0x696969, 0, 1)
    WindowLine(winParams.pluginId, winParams.width - winParams.scrollBarWidth + 7, winParams.height - 2, winParams.width - 2, winParams.height - winParams.scrollBarWidth + 7, 0xffffff, 0, 2)
    WindowLine(winParams.pluginId, winParams.width - winParams.scrollBarWidth + 8, winParams.height - 2, winParams.width - 2, winParams.height - winParams.scrollBarWidth + 8, 0x696969, 0, 1)
    WindowLine(winParams.pluginId, winParams.width - winParams.scrollBarWidth + 10, winParams.height - 2, winParams.width - 2, winParams.height - winParams.scrollBarWidth + 10, 0xffffff, 0, 2)
    WindowLine(winParams.pluginId, winParams.width - winParams.scrollBarWidth + 11, winParams.height - 2, winParams.width - 2, winParams.height - winParams.scrollBarWidth + 11, 0x696969, 0, 1)

    -- 绘制边框
    WindowRectOp(winParams.pluginId, 1, 0, 0, 0, 0, winParams.borderColor)

    -- 绘制小配件
    drawStuff()
end

function ResizeMoveCallback()
    local posx, posy = WindowInfo(winParams.pluginId, 17), WindowInfo(winParams.pluginId, 18)

    winParams.width = winParams.width + posx - winParams.startx
    winParams.startx = posx
    --
    if (windowInfo.window_left + winParams.width > GetInfo(281)) then
        winParams.width = GetInfo(281) - windowInfo.window_left
        winParams.startx = GetInfo(281)
    end

    winParams.height = winParams.height + posy - winParams.starty
    winParams.starty = windowInfo.window_top + winParams.height

    --  winParams.height = GetInfo(280)-windowInfo.window_top
    --  winParams.starty = GetInfo(280)
    if (utils.timer() - winParams.lastRefresh > 0.0333) then
        drawWin(false)
        winParams.lastRefresh = utils.timer()
    end
end

function ResizeReleaseCallback()
    --winParams.height = winParams.titleHeight +(line_height*(WINDOW_LINES-1))+3 -- snap height down to not have dead space after last line
    drawWin(true)
end

--- 处理频道信息
function chats (name, line, wildcards, styles)
   if (winParams.echo == 0) then
      EnableTriggerGroup("end_gag", true)
   end

   if winParams.echo == 1 then
      echoStyles(styles)
   end

   stampAndStore(styles)
end

function untaggedInfo (name, line, wildcards, styles)
   if (winParams.echo == 0) then
      EnableTriggerGroup("end_gag", true)
   end

   if winParams.echo == 1 then
      echoStyles(styles)
   end

   stampAndStore(styles)
end

function chatShow (name, line, wildcards)
   WindowShow( winParams.pluginId, true )
   ColourNote ("yellow", "", "聊天窗口显示. 输入 'chats hide' 隐藏聊天窗口.")
end -- function chat_show

function chatHide (name, line, wildcards)
   WindowShow( winParams.pluginId, false )
   ColourNote ("yellow", "", "聊天窗口隐藏. 输入 'chats show' 重新显示聊天窗口.")
end -- function chat_hide

--- 在主屏输出信息
function echoStyles (styles)
   for _, v in ipairs(styles) do
      ColourTell(RGBColourToName(v.textcolour), RGBColourToName(v.backcolour), v.text)
   end -- for each style run
   Note ("")  -- wrap up line
end

--- 更新输出标志
function updateEchoFlag (name, line, wildcards)
   if wildcards [1] == false then
      winParams.echo = not winParams.echo
   elseif wildcards [1]:lower () == " on" then
      winParams.echo = 1
   elseif wildcards [1]:lower () == " off" then
      winParams.echo = 0
   end

   if winParams.echo == 1 then
      ColourNote ("yellow", "", "主屏信息显示打开.")
   else
      ColourNote ("yellow", "", "主屏信息显示关闭.")
   end
end

-- 存储聊天信息至缓冲区
function stampAndStore(styles)
    local localStyles = copytable.deep(styles)
    local text = ""
    local logText = ""

    -- 如果时间格式有设定，那么需要先生成时间戳
    if dateFormat ~= "" then
        local tstamp = os.date(dateFormat)
        local timestyle = {}
        timestyle.text = tstamp
        timestyle.length = #timestyle.text
        timestyle.textcolour = 0xc0c0c0
        -- 插入时间戳
        table.insert(styles, 1, timestyle)
    end

    text = StylesToColoursOneLine(copytable.deep(styles), 1, 99999)

    if (winParams.logTofile == 1) then
        if (logTimestamps == 0) then
            logText = StylesToColoursOneLine(localStyles, 1, 99999)
        else
            logText = text
        end
        if (logColourCodes == 0) then
            logText = strip_colours(logText)
        end
        local f = assert(io.open(GetInfo(58):gsub("^\.\\", GetInfo(56)) .. GetInfo(2) .. "ChatLog.txt", "a+")) -- handle to chat log file
        f:write(logText .. "\n") -- write to it
        f:close() -- close that file now
    end

    local urls = findURLs(strip_colours(text))

    -- 为了适应窗口大小调整，需要存储原始数据，如果大于最大行数限制，那么需要删除最早的一行
    if #(winParams.rawChatlines) >= winParams.logMaxLines then
        table.remove(winParams.rawChatlines, 1)
    end
    table.insert(winParams.rawChatlines, { [1] = styles, [2] = urls })

    fillBuffer(styles, urls)
    drawStuff()
end

--- 填充缓冲区
function fillBuffer(rawstyles, rawurls)
    local avail = winParams.width - (winParams.textInset * 2) - 9
    local line_styles = {}
    local beginning = true
    local length = 0
    local styles = copytable.deep(rawstyles)
    local urls = copytable.deep(rawurls)

    -- 提取函数，方便调用
    local remove = table.remove
    local insert = table.insert

    -- Keep pulling out styles and trying to fit them on the current line
    local foundbreak = false
    while #styles > 0 do
        -- break off the next style
        local style = remove(styles, 1)

        -- make this handle forced newlines like in the flickoff social
        -- by splitting off and sticking the next part back into the
        -- styles list for the next pass
        newline = string.find(style.text, "\n")
        if newline then
            insert(styles, 1, {
                text = string.sub(style.text, newline + 1),
                length = style.length - newline + 1,
                textcolour = style.textcolour,
                backcolour = style.backcolour
            })
            -- we're leaving in the newline characters here because we need to be
            -- able to copy them later. I'll clean up the buggy visual later when
            -- actually displaying the lines.
            style.length = newline
            style.text = string.sub(style.text, 1, newline)
            foundbreak = true
        end

        -- 提取当前频道信息内容的长度
        local text_width = WindowTextWidth(winParams.pluginId, winParams.chatFontId, style.text)

        -- if it fits, copy whole style in
        if text_width <= avail then
            insert(line_styles, style)
            length = length + style.length
            avail = avail - text_width
            if foundbreak then
                avail = 0
            end
        else -- otherwise, have to split style
        -- look for trailing space (work backwards). remember where space is
        local col = style.length - 1
        local split_col
        -- keep going until out of columns
        while col > 1 do
            text_width = WindowTextWidth(winParams.pluginId, winParams.chatFontId, style.text:sub(1, col))
            if text_width <= avail then
                if not split_col then
                    local _, b = string.gsub(style.text:sub(1, col), "[\x00-\xff !%%'()*+,-./yz{|}~]", "")
                    if b % 2 then
                        split_col = col - 1 -- in case no space found, this is where we can split
                    else
                        split_col = col -- in case no space found, this is where we can split
                    end
                end -- if
                -- see if space here
                if style.text:sub(col, col) == " " then
                    split_col = col
                    break
                end -- if space
            end -- if will now fit
            col = col - 1
        end -- while

        if split_col then
            -- if we found a place to split, use old style and truncate it.
            -- Also stick the rest back with the same styling back into the styles list
            insert(line_styles, style)
            local style_copy = copytable.shallow(style)
            style.text = style.text:sub(1, split_col)
            style.length = split_col
            style_copy.text = style_copy.text:sub(split_col + 1)
            style_copy.length = #style_copy.text
            insert(styles, 1, style_copy)
            length = length + style.length
        elseif next(line_styles) == nil then
            -- Actually, I don't think this can ever happen. -Fiendish
            insert(line_styles, style)
            length = length + style.length
        else
            -- if we're about to start a new style and the
            -- line is completely full, put it back in the list for later
            insert(styles, 1, style)
        end -- if
        avail = 0 -- now we need to wrap
        end -- if could/not fit whole thing in

        -- out of styles or out of room? add a line for what we have so far
        if #styles == 0 or avail <= 0 then
            if #winParams.chatlines >= winParams.logMaxLines then
                -- if the history buffer is full then remove the oldest line
                remove(winParams.chatlines, 1)
                winParams.lineStart = winParams.lineStart - 1
                winParams.lineEnd = winParams.lineEnd - 1
            end -- buffer full

            local line_urls = {}
            while urls[1] and urls[1].stop <= length do
                insert(line_urls, remove(urls, 1))
            end
            if urls[1] and urls[1].start < length then
                local url = copytable.deep(urls[1])
                url.stop = length + 1
                urls[1].stop = urls[1].stop - 1
                urls[1].old = true
                insert(line_urls, url)
            end
            for i, v in ipairs(urls) do
                urls[i].start = urls[i].start - length
                urls[i].stop = urls[i].stop - length
                if urls[i].start <= 1 then
                    urls[i].start = 1
                    urls[i].stop = urls[i].stop + 1
                end
            end

            add_line(line_styles, beginning, line_urls)

            avail = winParams.width - (winParams.textInset * 2) - 9
            line_styles = {}
            length = 0
            beginning = false
        end -- line full
    end -- while we still have styles over
end

function drawStuff()
    -- 滚动条
    WindowRectOp(winParams.pluginId, 2, winParams.width - winParams.scrollBarWidth, winParams.titleHeight, winParams.width, -winParams.scrollBarWidth, winParams.scrollBackgroundColor) -- scroll bar background
    WindowRectOp(winParams.pluginId, 1, winParams.width - winParams.scrollBarWidth + 1, winParams.scrollBarWidth + winParams.titleHeight + 1, winParams.width - 1, winParams.height - (2 * winParams.scrollBarWidth) - 1, winParams.scrollDetailColor) -- scroll bar background inset rectangle

    -- 
    local points = null
    if (winParams.keepscrolling == "up") then
        -- draw top scroll button pressed
        WindowRectOp(winParams.pluginId, 5, (winParams.width - winParams.scrollBarWidth), winParams.titleHeight, 0, winParams.titleHeight + winParams.scrollBarWidth, 10, 15 + 0x800) -- up arrow pushed
        points = string.format("%i,%i,%i,%i,%i,%i", (winParams.width - winParams.scrollBarWidth) + 3, winParams.titleHeight + 9, (winParams.width - winParams.scrollBarWidth) + 7, winParams.titleHeight + 5, (winParams.width - winParams.scrollBarWidth) + 11, winParams.titleHeight + 9)
        WindowPolygon(winParams.pluginId, points,
            0x000000, 0, 1, -- pen (solid, winParams.width 1)
            0x000000, 0, -- brush (solid)
            true, -- close
            false) -- alt fill
    else
        -- draw top scroll button unpressed
        WindowRectOp(winParams.pluginId, 5, (winParams.width - winParams.scrollBarWidth), winParams.titleHeight, winParams.width, winParams.titleHeight + winParams.scrollBarWidth, 5, 15 + 0x800)
        points = string.format("%i,%i,%i,%i,%i,%i", (winParams.width - winParams.scrollBarWidth) + 3, winParams.titleHeight + 9, (winParams.width - winParams.scrollBarWidth) + 7, winParams.titleHeight + 5, (winParams.width - winParams.scrollBarWidth) + 11, winParams.titleHeight + 9)
        WindowPolygon(winParams.pluginId, points,
            0x000000, 0, 1, -- pen (solid, winParams.width 1)
            0x000000, 0, --brush (solid)
            true, --close
            false) --alt fill
    end

    if (keepscrolling == "down") then
        -- draw bottom scroll button pressed
        WindowRectOp(winParams.pluginId, 5, (winParams.width - winParams.scrollBarWidth), winParams.height - (winParams.scrollBarWidth * 2), 0, winParams.height - winParams.scrollBarWidth - 1, 10, 15 + 0x800)
        points = string.format("%i,%i,%i,%i,%i,%i", (winParams.width - winParams.scrollBarWidth) + 3, (winParams.height - winParams.scrollBarWidth) - 11, (winParams.width - winParams.scrollBarWidth) + 7, (winParams.height - winParams.scrollBarWidth) - 7, (winParams.width - winParams.scrollBarWidth) + 11, (winParams.height - winParams.scrollBarWidth) - 11)
        WindowPolygon(winParams.pluginId, points,
            0x000000, 0, 1, -- pen (solid, winParams.width 1)
            0x000000, 0, -- brush (solid)
            true, -- close
            false) -- alt fill
    else
        -- draw bottom scroll button unpressed
        WindowRectOp(winParams.pluginId, 5, (winParams.width - winParams.scrollBarWidth), winParams.height - (winParams.scrollBarWidth * 2), winParams.width, winParams.height - winParams.scrollBarWidth, 5, 15 + 0x800)
        points = string.format("%i,%i,%i,%i,%i,%i", (winParams.width - winParams.scrollBarWidth) + 3, (winParams.height - winParams.scrollBarWidth) - 11, (winParams.width - winParams.scrollBarWidth) + 7, (winParams.height - winParams.scrollBarWidth) - 7, (winParams.width - winParams.scrollBarWidth) + 11, (winParams.height - winParams.scrollBarWidth) - 11)
        WindowPolygon(winParams.pluginId, points,
            0x000000, 0, 1, -- pen (solid, winParams.width 1)
            0x000000, 0, --brush (solid)
            true, --close
            false) --alt fill
    end

    -- The scrollbar position indicator
    winParams.totalSteps = #(winParams.chatlines)
    if (winParams.totalSteps <= winParams.showLines - 1) then
        winParams.totalSteps = 1
    end
    winParams.scrollBarHeight = (winParams.height - (3 * winParams.scrollBarWidth) - winParams.titleHeight)
    if (not dragscrolling) then
        local stepNum = winParams.lineStart - 1
        winParams.barPos = winParams.scrollBarWidth + winParams.titleHeight + ((winParams.scrollBarHeight / winParams.totalSteps) * stepNum)
        winParams.barSize = (winParams.scrollBarHeight / math.max(winParams.showLines - 1, winParams.totalSteps)) * (winParams.showLines - 1)
        if winParams.barSize < 10 then
            winParams.barSize = 10
        end
        if winParams.barPos + winParams.barSize > winParams.scrollBarWidth + winParams.titleHeight + winParams.scrollBarHeight then
            winParams.barPos = winParams.scrollBarWidth + winParams.titleHeight + winParams.scrollBarHeight - winParams.barSize
        end
        WindowAddHotspot(winParams.pluginId, "scroller", (winParams.width - winParams.scrollBarWidth), winParams.barPos, winParams.width, winParams.barPos + winParams.barSize, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 1, 0)
        WindowDragHandler(winParams.pluginId, "scroller", "ScrollerMoveCallback", "ScrollerReleaseCallback", 0)
    end
    WindowRectOp(winParams.pluginId, 5, (winParams.width - winParams.scrollBarWidth), winParams.barPos, winParams.width, winParams.barPos + winParams.barSize, 5, 15 + 0x800) -- scrollbar position indicator

    -- reset hyperlinks if the text moves
    for k, v in pairs(winParams.hyperlinks) do
        WindowDeleteHotspot(winParams.pluginId, k)
    end
    winParams.hyperlinks = {}

    writeLines()
end

-- Returns an array {start, end, text}
function findURLs(text)
   local URLs = {}
   local start, position = 0, 0
   -- "rex" is a table supplied by MUSHclient for PCRE functionality.
   local re = rex.new("(?:https?://|mailto:)\\S*[\\w/=@#\\-\\?]")
   re:gmatch(text,
      function (link, _)
         start, position = string.find(text, link, position, true)
         table.insert(URLs, {start=start, stop=position, text=link})
      end
   )
   return URLs
end

function add_line ( line, is_beginning_of_message, urls )
   -- add new line
   table.insert(winParams.chatlines, {[1]=line, [2]=is_beginning_of_message, [3]=urls} )
   -- advance the count
   if #(winParams.chatlines) >= winParams.showLines then
      winParams.lineStart = winParams.lineStart + 1
   end -- if
   
   if #(winParams.chatlines) > 1 then
      winParams.lineEnd = winParams.lineEnd + 1
   end -- if
end -- add_line

-- 展示频道行信息
function writeLines ()
   WindowRectOp(winParams.pluginId, 2, 1, winParams.titleHeight, winParams.width-winParams.scrollBarWidth, -1, winParams.backgroundColor) -- clear
   local ax = nil
   local zx = nil
   local line_no_colors = ""
   if #(winParams.chatlines) >= 1 then
      for count = winParams.lineStart, winParams.lineEnd do
         ax = nil
         zx = nil
         line_no_colors = strip_colours(StylesToColoursOneLine(copytable.deep(winParams.chatlines[count][1]), 1, 99999))
         
         -- create clickable links for urls
         for i,v in ipairs(winParams.chatlines[count][3]) do
            local left = winParams.textInset+WindowTextWidth(winParams.pluginId, winParams.chatFontId, string.sub(line_no_colors, 1, v.start-1))
            local right = left+WindowTextWidth(winParams.pluginId, winParams.chatFontId, string.sub(line_no_colors, v.start-1, v.stop-1))
            local top = winParams.titleHeight+((count-winParams.lineStart)*winParams.chatLineHeight)-1
            local bottom = top+winParams.chatLineHeight+1
            local link_name = table.concat({v.text,"   ",count,v.start,v.stop})
            if not WindowHotspotInfo(winParams.pluginId, link_name, 1) then
               winParams.hyperlinks[link_name] = v.text
               WindowAddHotspot(winParams.pluginId, link_name, left, top, math.min(right, winParams.width-winParams.scrollBarWidth-1), bottom, "MouseOverLink", "CancelMouseOverLink", "MouseDown", "CancelMouseDown", "MouseUp", "Right-click this URL if you want to open it:\n"..v.text, 1)
               WindowDragHandler(winParams.pluginId, link_name, "TextareaMoveCallback", "TextareaReleaseCallback", 0x10)
               WindowScrollwheelHandler(winParams.pluginId, link_name, "wheel_move")
            end
         end
         
         -- create highlighting parameters when text is selected
         if winParams.copyStartLine ~= nil and winParams.copyEndLine ~= nil and count >= winParams.copyStartLine and count <= winParams.copyEndLine then
            ax = (((count == winParams.copyStartLine) and math.min(winParams.startCopyingX, WindowTextWidth(winParams.pluginId, winParams.chatFontId, line_no_colors)+winParams.textInset)) or winParams.textInset)
            -- end of highlight for this line
            zx = math.min(winParams.width-winParams.scrollBarWidth,(((count == winParams.copyEndLine) 
                and math.min(winParams.endCopyingX, WindowTextWidth(winParams.pluginId, winParams.chatFontId, line_no_colors)+winParams.textInset)) 
            or WindowTextWidth(winParams.pluginId, winParams.chatFontId, line_no_colors)+winParams.textInset))
         end
         
         displayLine( count-winParams.lineStart, winParams.chatlines[count][1], ax, zx )
      end
   end
   Repaint()
end

-- 显示一行信息
function displayLine (line, styles, backfill_start, backfill_end)
   local left = winParams.textInset
   local top = winParams.titleHeight+(line* winParams.chatLineHeight)
   if (backfill_start ~= nil and backfill_end ~= nil) then
      WindowRectOp(win, 2, backfill_start, top+1, backfill_end, top+winParams.chatLineHeight+1, 0x444444)
   end
   if styles then
      for _, v in ipairs(styles) do
         local t = v.text
         -- now clean up dangling newlines that cause block characters to show
         if string.sub(v.text,-1) == "\n" then
            t = string.sub(v.text,1,-2)
         end
         left = left + WindowText(winParams.pluginId, winParams.chatFontId, t, left, top,  winParams.width-winParams.scrollBarWidth, 0, v.textcolour)
      end -- for each style run
   end
end

-- 函数定义 结束
---------------------------------------------------------------------------------

        ]]>
    </script>


</muclient>
