<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
    <plugin
            name="chat_window"
            author="醉轻侯" id="b555825a4a5700c35fa80780"
            language="Lua" purpose="江南侠客行聊天窗口"
            save_state="y" date_written="2016-08-17 00:22:37"
            requires="4.94"
            version="1.0">
        <description trim="y">
            江南侠客行聊天窗口
        </description>
    </plugin>

    <triggers>
    </triggers>

    <!--  Script  -->
    <script>
        <![CDATA[
require "movewindow"
require "serialize"
    
---------------------------------------------------------------------------------
-- 参数初始化 开始

-- 窗口默认参数
local winParams = {
    pluginId,
    maxLines = 10000,
    width = 657, height = 131,
    x = 0, y = 0,
    startx = 0,    starty = 0,
    -- date_format = "[%d %b %H:%M:%S] "   -- [30 Aug 13:29:49]   date and time 24 hour
    -- date_format = "[%d %b %I:%M:%S%p] " -- [30 Aug 01:20:12PM] date and time 12 hour
    -- date_format = "[%H:%M:%S] "         -- [13:29:08]          time 24 hour
    -- date_format = "[%X] "               -- [1:22:06 PM]        time 12 hour
    dateFormat = "[%d %b %H:%M:%S] ",
    -- 颜色
    backgroundColor = GetNormalColour(1),
    textColor = 0xffffff,
    scrollBarWidth = 15,
    scrollBackgroundColor = 0xE8E8E8,
    scrollBarColor = 0x111111,
    scrollDetailColor = 0x000000,
    borderColor=0xE8E8E8,
    -- 文本边缘的间距
    textInset = 5,
    lastRefresh=0
}

local windowInfo = null

-- 参数初始化 结束
---------------------------------------------------------------------------------

---------------------------------------------------------------------------------
-- 插件需要响应的事件 开始

---- 插件第一次安装
function OnPluginInstall()
    -- 从上次保存的数据中恢复窗口参数
    local paramsString = GetVariable("winParams")
    if paramsString ~= nil and paramsString ~= "" then
        winParams = assert(loadstring(paramsString))()
        winParams.init = true
    else
        -- 获得当前插件的唯一ID（24字符）
        winParams.pluginId = GetPluginID()
    end

    -- 创建假窗口，获取字体相关信息
    check(WindowCreate(winParams.pluginId, 0, 0, 1, 1, 0, 0, winParams.backgroundColor))

    -- 字体库
    local fonts = utils.getfontfamilies()
    if not fonts.Dina then
        AddFont(GetInfo(66) .. "\\Dina.fon")
        fonts = utils.getfontfamilies()
    end

    if fonts["Dina"] then
        winParams.fontSize = 10
        winParams.fontName = "Dina" -- the actual font
    elseif fonts["Courier New"] then
        winParams.fontSize = 9
        winParams.fontName = "Courier New"
    else
        winParams.fontSize = 9
        winParams.fontName = "Lucida Console"
    end

    winParams.chatFontId = "font"..winParams.pluginId
    winParams.headerFontId = "fonthead"..winParams.pluginId
    check(WindowFont(winParams.pluginId, winParams.chatFontId, winParams.fontName, winParams.fontSize))
    check(WindowFont(winParams.pluginId, winParams.headerFontId, winParams.fontName, winParams.fontSize -1 ))

    winParams.chatFontHeight = WindowFontInfo(winParams.pluginId, winParams.chatFontId, 1) -  WindowFontInfo(winParams.pluginId, winParams.chatFontId, 4) + 1
    winParams.headerFontHeight = WindowFontInfo(winParams.pluginId, winParams.headerFontId, 1) - WindowFontInfo(winParams.pluginId, winParams.headerFontId, 4) + 1

    winParams.chatLineHeight = winParams.chatFontHeight+1
    winParams.titleHeight = winParams.headerFontHeight*1.8

    windowInfo  = movewindow.install(
        winParams.pluginId, 
        miniwin.pos_top_right, miniwin.create_absolute_location, 
        false,
         nil, 
        {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},
        {x = winParams.x, y = winParams.y}
    )

    drawWin(true)
end

---- 保存窗口状态
function OnPluginSaveState()
    movewindow.save_state(winParams.pluginId)
    -- 序列化winParams
    SetVariable("winParams", serialize.save("winParams",winParams).. "\n return winParams")
end

---- 插件启用
function OnPluginEnable()
end

---- 插件禁用
function OnPluginDisable()
end

-- 插件需要响应的事件 结束
---------------------------------------------------------------------------------

---------------------------------------------------------------------------------
-- 函数定义 开始

function drawWin(firstTime)
    winParams.showLines = math.ceil((winParams.height-winParams.titleHeight)/winParams.chatLineHeight)

    if firstTime then
        WindowCreate(
            winParams.pluginId, 
            windowInfo.window_left, windowInfo.window_top, 
            winParams.width, winParams.height, 
            windowInfo.window_mode, windowInfo.window_flags, 
            winParams.backgroundColor
        )

        -- catch for right-click menu and line selection
        WindowAddHotspot(
            winParams.pluginId, 
            "textarea", 1, 
            winParams.titleHeight, winParams.width-winParams.scrollBarWidth-1,winParams.height-3, 
            "", "", "MouseDown", "CancelMouseDown", "MouseUp", "", 2, 0
        )
        --WindowDragHandler(winParams.pluginId, "textarea", "TextareaMoveCallback", "TextareaReleaseCallback", 0x10)

        --WindowScrollwheelHandler(winParams.pluginId, "textarea", "wheel_move")
        

        -- 增加移动窗口的响应区
        movewindow.add_drag_handler(winParams.pluginId, 0, 0, 0, winParams.titleHeight)

        -- 移动窗口的事件
        WindowAddHotspot(winParams.pluginId, "resize", 
            winParams.width-winParams.scrollBarWidth, winParams.height-winParams.scrollBarWidth, 
            winParams.width, winParams.height, 
            "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 6, 0)
        WindowDragHandler(winParams.pluginId, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
    else
      WindowResize(winParams.pluginId, winParams.width, winParams.height, winParams.backgroundColor)
      WindowMoveHotspot(winParams.pluginId, "textarea", 0, winParams.titleHeight, winParams.width- winParams.scrollBarWidth-1, winParams.height-3)
      WindowMoveHotspot(winParams.pluginId, "up", winParams.width-winParams.scrollBarWidth, winParams.titleHeight, 0, winParams.titleHeight+winParams.scrollBarWidth)
      WindowMoveHotspot(winParams.pluginId, "down", winParams.width-winParams.scrollBarWidth, winParams.height-(2*winParams.scrollBarWidth), 0, winParams.height-winParams.scrollBarWidth)
      WindowMoveHotspot(winParams.pluginId, "resize", winParams.width-winParams.scrollBarWidth, winParams.height-winParams.scrollBarWidth, winParams.width, 0)
    end
    -- 显示窗口
    WindowShow(winParams.pluginId, true)

    -- 标题框
    winParams.headerWidth = WindowTextWidth(winParams.pluginId, winParams.headerFontId, "频道信息")
   WindowGradient(winParams.pluginId, 1, 0, winParams.width, winParams.titleHeight, winParams.backgroundColor, 0x444444, 2)
   WindowText(
    winParams.pluginId,
    winParams.headerFontId, "频道信息",
    (winParams.width-winParams.headerWidth)/2, ((winParams.titleHeight-winParams.headerFontHeight)/2)-1, winParams.width, winParams.titleHeight, 
    0xEEEEEE, false)
   WindowLine(winParams.pluginId, 0, winParams.titleHeight-1, winParams.width, winParams.titleHeight-1, winParams.borderColor, 0 + 0x0200, 1)
   
   -- 滚动条
   WindowRectOp(winParams.pluginId, 2, winParams.width-winParams.scrollBarWidth, winParams.titleHeight, winParams.width, -winParams.scrollBarWidth, winParams.scrollBackgroundColor) -- scroll bar background
   WindowRectOp(winParams.pluginId, 1, winParams.width-winParams.scrollBarWidth+1, winParams.scrollBarWidth+winParams.titleHeight+1, winParams.width-1, winParams.height-(2*winParams.scrollBarWidth)-1, winParams.scrollDetailColor) -- scroll bar background inset rectangle

   -- 调整大小的图标
   WindowRectOp(winParams.pluginId, 2, winParams.width-winParams.scrollBarWidth, winParams.height-winParams.scrollBarWidth, 0, 0, winParams.scrollBackgroundColor)
   WindowLine(winParams.pluginId, winParams.width-winParams.scrollBarWidth+1, winParams.height-2, winParams.width-2, winParams.height-winParams.scrollBarWidth+1, 0xffffff, 0, 2)
   WindowLine(winParams.pluginId, winParams.width-winParams.scrollBarWidth+2, winParams.height-2, winParams.width-2, winParams.height-winParams.scrollBarWidth+2, 0x696969, 0, 1)
   WindowLine(winParams.pluginId, winParams.width-winParams.scrollBarWidth+4, winParams.height-2, winParams.width-2, winParams.height-winParams.scrollBarWidth+4, 0xffffff, 0, 2)
   WindowLine(winParams.pluginId, winParams.width-winParams.scrollBarWidth+5, winParams.height-2, winParams.width-2, winParams.height-winParams.scrollBarWidth+5, 0x696969, 0, 1)
   WindowLine(winParams.pluginId, winParams.width-winParams.scrollBarWidth+7, winParams.height-2, winParams.width-2, winParams.height-winParams.scrollBarWidth+7, 0xffffff, 0, 2)
   WindowLine(winParams.pluginId, winParams.width-winParams.scrollBarWidth+8, winParams.height-2, winParams.width-2, winParams.height-winParams.scrollBarWidth+8, 0x696969, 0, 1)
   WindowLine(winParams.pluginId, winParams.width-winParams.scrollBarWidth+10, winParams.height-2, winParams.width-2, winParams.height-winParams.scrollBarWidth+10, 0xffffff, 0, 2)
   WindowLine(winParams.pluginId, winParams.width-winParams.scrollBarWidth+11, winParams.height-2, winParams.width-2, winParams.height-winParams.scrollBarWidth+11, 0x696969, 0, 1)

    -- 绘制边框
    WindowRectOp(winParams.pluginId, 1, 0, 0, 0, 0, winParams.borderColor)
end

function ResizeMoveCallback ()
   local posx, posy = WindowInfo(winParams.pluginId, 17), WindowInfo(winParams.pluginId, 18)
 winParams.width = winParams.width + posx - winParams.startx

    winParams.width = winParams.width + posx - winParams.startx
    winParams.startx = posx

    --  winParams.width = GetInfo(281)-windowInfo.window_left
     -- winParams.startx = GetInfo(281)

   winParams.height = winParams.height+posy-winParams.starty
   winParams.starty=posy

    --  winParams.height = GetInfo(280)-windowInfo.window_top
    --  winParams.starty = GetInfo(280)

   if (utils.timer() - winParams.lastRefresh > 0.0333) then
      drawWin(false)
      winParams.lastRefresh = utils.timer()
   end
end

function ResizeReleaseCallback ()
   --winParams.height = winParams.titleHeight +(line_height*(WINDOW_LINES-1))+3 -- snap height down to not have dead space after last line
   drawWin(true) -- true here causes old lines to re-wrap at the new size
end

-- 函数定义 结束
---------------------------------------------------------------------------------

]]>
    </script>


</muclient>
