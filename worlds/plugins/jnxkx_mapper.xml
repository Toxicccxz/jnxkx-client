<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on 2016年 八月 31日 星期三, 下午 4:26 -->
<!-- MuClient version 4.94 -->

<!-- Plugin "jnxkx_mapper" generated by Plugin Wizard -->

<muclient>
<plugin
   name="jnxkx_mapper"
   author="醉轻侯"
   id="edcf4aa888923fc857b50bd8"
   language="Lua"
   purpose="江南侠客行GPS"
   date_written="2016-08-31 16:24:24"
   requires="4.94"
   version="1.0"
   >
<description trim="y">
<![CDATA[
暂时没有
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="mapper"
   match="^(&gt; )*([^&gt;;:+-.,]{1,16}) \- $"
   regexp="y"
   script="setRoomShortName"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   group="mapper"
   match="^(> )*    这里.*的出口是(.*)$"
   regexp="y"
   script="setRoomExits"
   sequence="100"
  >
  </trigger>
      <trigger
   enabled="y"
   group="mapper"
   match="^(> )*【(.*)地图】"
   regexp="y"
   script="setArea"
   sequence="100"
  >
  </trigger>
</triggers>

<!--  Script  -->


<script>
<![CDATA[
require "tprint"

local dbPath = GetInfo (66) .. "mushclient_prefs.sqlite"

-- -----------------------------------------------------------------
-- 房间变动的命令记录
-- -----------------------------------------------------------------
local directionsFullName = {
    north = "n",
    south = "s",
    east = "e",
    west = "w",
    up = "u",
    down = "d",
    northeast = "ne",
    northwest = "nw",
    southeast = "se",
    southwest = "sw",
    ['in'] = "in",
    out = "out",
}

local directions = {
    n = "n",
    s = "s",
    e = "e",
    w = "w",
    u = "u",
    d = "d",
    ne = "ne",
    sw = "sw",
    nw = "nw",
    se = "se",
    north = "n",
    south = "s",
    east = "e",
    west = "w",
    up = "u",
    down = "d",
    northeast = "ne",
    northwest = "nw",
    southeast = "se",
    southwest = "sw",
    ['in'] = "in",
    out = "out",
}

-- 返回路径
local inverseDir = {
    n = "s",
    s = "n",
    e = "w",
    w = "e",
    u = "d",
    d = "u",
    ne = "sw",
    sw = "ne",
    nw = "se",
    se = "nw",
    ['in'] = "out",
    out = "in",
}

local lastDir = null
local currentArea = null
local prevRoom = {}
local currentRoom = {}

function OnPluginInstall ()
    forceOpenDB()
end

function OnPluginSaveState ()
    reopenDB()
end

function OnPluginSent(sText)
    lastDir = directions[sText]
end

function setArea(name, line, wildcards)
    currentRoom.area = wildcards[2]
    findAndSaveCurrentRoom()
    -- Note(currentRoom.area..' '..currentRoom.shortName..' '..currentRoom.exitsText)
end

function setRoomShortName(name, line, wildcards)
    currentRoom.shortName = wildcards[2]
end

function setRoomExits(name, line, wildcards)
    currentRoom.exits = {}
    currentRoom.exitsText = wildcards[2]
    for k,v in pairs(directionsFullName) do
        if string.find(wildcards[2], "%s"..k) ~= nil or string.find(wildcards[2], k.."%s") then
            currentRoom.exits[k] = -1
        end
    end
    
    -- tprint(currentRoom)
end

function findAndSaveCurrentRoom()
    if(currentRoom.area and currentRoom.shortName and currentRoom.exits) then
        if not currentRoom.exitsText then
            currentRoom.exitsText = ''
        end

        local roomFlag = utils.tohex(utils.md5(currentRoom.area..' '..currentRoom.shortName..' '..currentRoom.exitsText))
        local existRooms = db:nrows( string.format("SELECT * FROM main.rooms where flag='%s'", roomFlag))
        if not existRooms or #existRooms = 0 then
               local status = assert(db:execute(
            string.format(
               "INSERT INTO main.rooms (flag, short_name, area) VALUES('%s', '%s', '%s')",
               roomFlag, currentRoom.shortName,currentRoom.area
        )
    ))

   if status ~= sqlite3.OK then
        Note('新建房间发生错误['.. status ..'] : '..db:errmsg())
   end
        end



--for row in db:nrows("SELECT * FROM main.rooms") do
-- print ("\n------ list ---------\n")
 --tprint (row)
--end

        closeDB()

        Note('房间采集完成')
    end
end

function forceOpenDB()
   if db == nill or not db:isopen() then
      db = assert (sqlite3.open(dbPath))
   end
end

function reopenDB()
    if db and  db:isopen() then
      db:close()
   end

   db = assert (sqlite3.open(dbPath))
end

function closeDB()
    if db and db:isopen() then
        db:close()
    end
end


]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="jnxkx_mapper:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
