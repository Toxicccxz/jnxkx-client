<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
    <plugin
            name="hp_status_bars"
            author="醉轻侯" id="66c7d927ed3516f8cfadc2ec"
            language="Lua" purpose="江南侠客行HP状态栏"
            save_state="y" date_written="2016-08-18 00:22:37"
            requires="4.94"
            version="1.0">
        <description trim="y">
            江南侠客行HP状态栏
        </description>
    </plugin>

    <timers>
        <timer name="hpbrief" enabled="n" second="3.00" offset_second="0.00" send_to="12">
            <send>SendNoEcho("hpbrief")</send>
        </timer>
        <timer name="heartbeat" enabled="n" second="3.00" offset_second="0.00" send_to="12" script="onHeartbeat"
               active_closed="y">
        </timer>
    </timers>

    <triggers>
        <trigger name="login"
                 enabled="y"
                 match="^(&gt;)*( )*目前权限："
                 regexp="y"
                 script="onLogin"
                 sequence="100">
        </trigger>
        <trigger name="hpbrief"
                 enabled="y"
                 match="^[> ]*#(.+),(.+),(\d+),(\d+),(\d+),(\d+)\n#(\d+),(\d+),(\d+),(\d+),(\d+),(\d+)"
                 regexp="y"
                 multi_line="y"
                 lines_to_match="2"
                 omit_from_output="y"
                 script="onHpbrief"
                 sequence="101">
        </trigger>
    </triggers>


    <!-- 获取mushclient常量 -->
    <include name="constants.lua"/>

    <!--  Script  -->
    <script>
        <![CDATA[
require "movewindow"
require "serialize"

---------------------------------------------------------------------------------
-- 参数初始化 开始

-- 窗口默认参数
local winParams = {
    pluginId,
    init = true,
    backgroundColour = 0x000000,    borderColor = 0xcccccc,
    width = 1137,    height = 0,
    lineHeight = 0,
    x = 0,    y = 552,
    startx = 0,    starty = 0,
    resizeTagSize = 10,
    minWidth = 40,
    leftMargin = 10,    topMargin = 5,
    fontId = "f1",    fontName = "Arial",    fontSize = "8",
    windowInfo = null,
    lastRefresh = 0,
}

local windowInfo = null

-- 状态默认数据
local status = {
    exp = { label = "经验: ", val = 0, color1 = 0x00ffff, color2 = 0x00ffff, index = 3 },
    pot = { label = "潜能: ", val = 0, color1 = 0xffffff, color2 = 0x00ffff, index = 6 },
    neili = { label = "内力 :", val = 0, max = 1, color1 = 0x0000ff, color2 = 0x00ffff, index = 2 },
    jingli = { label = "精力 :", val = 0, max = 1, color1 = 0x0000ff, color2 = 0x00ffff, index = 5 },
    qi = { label = "气血: ", val = 0, currMax = 1, max = 1, color1 = 0x00ff00, color2 = 0x004400, index = 1 },
    jing = { label = "精神: ", val = 0, currMax = 1, max = 1, color1 = 0xff5500, color2 = 0x442200, index = 4 },
    --food = { label = "食物:", val = 0, max = 1, color1 = 0x00ffff, color2 = 0x004444 , index =7},
    --water = { label = "饮水:", val = 0, max = 1, color1 = 0xffffff, color2 = 0x444444 , index =8}
}

-- 参数初始化 结束
---------------------------------------------------------------------------------

---------------------------------------------------------------------------------
-- 插件需要响应的事件 开始

---- 插件第一次安装
function OnPluginInstall()
    -- 从上次保存的数据中恢复窗口参数
    local paramsString = GetVariable("winParams")
    if paramsString ~= nil and paramsString ~= "" then
        winParams = assert(loadstring(paramsString))()
        winParams.init = true
    else
        -- 获得当前插件的唯一ID（24字符）
        winParams.pluginId = GetPluginID()
    end

    -- 创建假窗口，获取字体相关信息
    WindowCreate(winParams.pluginId, 600, 600, 1, 1, 0, 0, winParams.backgroundColour)

    -- 字体库
    local fonts = utils.getfontfamilies()
    if not fonts.Dina then
        AddFont(GetInfo(66) .. "\\Dina.fon")
        fonts = utils.getfontfamilies()
    end

    if fonts["Dina"] then
        winParams.fontSize = 10
        winParams.fontName = "Dina" -- the actual font
    elseif fonts["Courier New"] then
        winParams.fontSize = 9
        winParams.fontName = "Courier New"
    else
        winParams.fontSize = 9
        winParams.fontName = "Lucida Console"
    end

    -- 设置窗体字体
    WindowFont(winParams.pluginId, winParams.fontId, winParams.fontName, winParams.fontSize, false, false, false, false)
    -- 获得窗口的位置信息，以及预设拖动时的事件响应
    windowInfo = movewindow.install(winParams.pluginId,
        miniwin.pos_top_right,
        miniwin.create_absolute_location,
        false,
        nil,
        { mouseup = MouseUp, mousedown = LeftClickOnly, dragmove = LeftClickOnly, dragrelease = LeftClickOnly },
        { x = winParams.x, y = winParams.y })

    -- 统计需要展示的属性文本和数量
    local barTexts = ""
    local numBars = 0
    for i, v in pairs(status) do
        barTexts = barTexts .. v.label
        numBars = numBars + 1
    end

    local font_height = WindowFontInfo(winParams.pluginId, winParams.fontId, 1) - WindowFontInfo(winParams.pluginId, winParams.fontId, 4) + 1
    local font_width = WindowFontInfo(winParams.pluginId, winParams.fontId, 6)
    winParams.lineHeight = font_height + winParams.topMargin

    -- 根据显示的数据长度，设定窗口宽度
    local curr_width = math.max(40, WindowTextWidth(winParams.pluginId, winParams.fontId, barTexts) + (winParams.leftMargin * (numBars + 2)))
    winParams.height = (winParams.topMargin * 2 + winParams.lineHeight) * 2
    winParams.width = math.max(winParams.width, winParams.minWidth)

    -- 绘制窗口
    DrawStatusBar(winParams)

    -- 保存当前状态
    OnPluginSaveState()
end

--- - 保存窗口状态
function OnPluginSaveState()
    movewindow.save_state(winParams.pluginId)
    -- 序列化winParams
    SetVariable("winParams", serialize.save("winParams",winParams).. "\n return winParams")
end

--- - 插件启用
function OnPluginEnable()
    OnPluginInstall()
end

--- - 插件禁用
function OnPluginDisable()
    OnPluginSaveState()
    WindowShow(winParams.pluginId, false)
end

-- 插件需要响应的事件 结束
---------------------------------------------------------------------------------

---------------------------------------------------------------------------------
-- 函数定义 开始

--- - 通用函数
string.lpad = function(str, len, char)
    str = tostring(str)
    if char == nil then char = ' ' end
    return string.rep(char, len - #str) .. str
end

string.rpad = function(str, len, char)
    str = tostring(str)
    if char == nil then char = ' ' end
    return str .. string.rep(char, len - #str)
end

--- - 用户登录时的处理
function onLogin()
    SetVariable("login", "1")
    SendNoEcho("hpbrief")
end

--- - 心跳检测
function onHeartbeat()
    if IsConnected() then
        -- 如果用户登录，启动刷新HP的定时器
        if GetVariable("login") ~= nil and (not GetTimerInfo("hpbrief", 6)) then
            EnableTimer("hpbrief", true)
        end
    else
        -- 如果断开连接，那么停止定时器
        if GetTimerInfo("hpbrief", 6) then
            EnableTimer("hpbrief", false)
        end
        -- 如果登录标志存在，那么删除该标志
        if GetVariable("login") ~= nil then
            DeleteVariable("login")
        end
    end
end

--- - HP状态解析
function onHpbrief(n, l, w)
    status.exp.val = w[1]
    status.pot.val = tonumber(w[2])
    status.neili.max = tonumber(w[3])
    status.neili.val = tonumber(w[4])
    status.jingli.max = tonumber(w[5])
    status.jingli.val = tonumber(w[6])
    status.qi.max = tonumber(w[7])
    status.qi.currMax = tonumber(w[8])
    status.qi.val = tonumber(w[9])
    status.jing.max = tonumber(w[10])
    status.jing.currMax = tonumber(w[11])
    status.jing.val = tonumber(w[12])
    DisplayStatsInfo(winParams)
end

--- - 当窗口的大小被改变
function ResizeMoveCallback()
    local posx, posy = WindowInfo(winParams.pluginId, 17), WindowInfo(winParams.pluginId, 18)

    winParams.width = winParams.width + posx - winParams.startx
    winParams.startx = posx
    --
    if (windowInfo.window_left + winParams.width > GetInfo(281)) then
        winParams.width = GetInfo(281) - windowInfo.window_left
        winParams.startx = GetInfo(281)
    end
end

--- - 当resize按钮松开后
function ResizeReleaseCallback()
    DrawStatusBar(winParams)
end

--- - 绘制窗口
function DrawStatusBar(params)
    params.effectiveWidth = math.max(params.minWidth, math.min(params.width, GetInfo(281) - windowInfo.window_left))
    if params.init then
        -- 创建窗口
        check(WindowCreate(params.pluginId,
            windowInfo.window_left, windowInfo.window_top, -- left, top (auto-positions)
            params.effectiveWidth, -- width
            params.height, -- height
            windowInfo.window_mode, -- auto-position: middle right
            windowInfo.window_flags, -- flags
            params.backgroundColour))
        -- 增加调节大小的热点
        WindowAddHotspot(params.pluginId, "resize",
            params.effectiveWidth - params.resizeTagSize,
            params.height - params.resizeTagSize,
            params.effectiveWidth,
            params.height,
            "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 6, 0)
        WindowDragHandler(params.pluginId, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
        CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", params.pluginId)
        -- 显示窗口
        WindowShow(params.pluginId, true)
        params.init = false
    else
        -- everything has already been made
        -- just move them back into place
        WindowResize(params.pluginId, params.effectiveWidth, params.height, params.backgroundColour)
        WindowMoveHotspot(winParams.pluginId, "resize", params.effectiveWidth-params.resizeTagSize, params.height-params.resizeTagSize, params.effectiveWidth, params.height)
    end

    -- Add the drag handler so they can move the window around
    movewindow.add_drag_handler(params.pluginId, 0, 0, 0, 0)

    DisplayStatsInfo(params)
end

--- - 展示HP中状态信息
function DisplayStatsInfo(params)
    -- 绘制背景
    WindowRectOp(params.pluginId, 2, 2, 2, -2, -2, params.backgroundColour)

    -- 绘制窗口边框.
    WindowRectOp(params.pluginId, 1, 0, 0, 0, 0, params.borderColor, 15)
    WindowRectOp(params.pluginId, 1, 1, 1, -1, -1, 0x777777, 15)

    -- 绘制调整大小的按钮
    WindowLine(params.pluginId, params.effectiveWidth - 3, params.height - 2, params.effectiveWidth - 2, params.height - 3, 0xffffff, 0, 2)
    WindowLine(params.pluginId, params.effectiveWidth - 4, params.height - 2, params.effectiveWidth - 2, params.height - 4, 0x696969, 0, 1)
    WindowLine(params.pluginId, params.effectiveWidth - 6, params.height - 2, params.effectiveWidth - 2, params.height - 6, 0xffffff, 0, 2)
    WindowLine(params.pluginId, params.effectiveWidth - 7, params.height - 2, params.effectiveWidth - 2, params.height - 7, 0x696969, 0, 1)
    WindowLine(params.pluginId, params.effectiveWidth - 9, params.height - 2, params.effectiveWidth - 2, params.height - 9, 0xffffff, 0, 2)
    WindowLine(params.pluginId, params.effectiveWidth - 10, params.height - 2, params.effectiveWidth - 2, params.height - 10, 0x696969, 0, 1)
    WindowLine(params.pluginId, params.effectiveWidth - 12, params.height - 2, params.effectiveWidth - 2, params.height - 12, 0xffffff, 0, 2)
    WindowLine(params.pluginId, params.effectiveWidth - 13, params.height - 2, params.effectiveWidth - 2, params.height - 13, 0x696969, 0, 1)

    if GetVariable("login") == nil or GetVariable("login") ~= "1" then
        local txt = "HP状态栏"
        local txtlen = WindowTextWidth(params.pluginId, params.fontId, txt)
        WindowText(params.pluginId, params.fontId, txt, (params.effectiveWidth - txtlen) / 2, (params.height / 2) - params.lineHeight, 0, 0, 0xeeeeee, false)
    else
        -- 排序状态值
        sortStatus = {}
        for k, v in pairs(status) do
            sortStatus[#sortStatus + 1] = v
        end
        table.sort(sortStatus, function(a, b)
            return a.index < b.index
        end)
        -- 开始绘制属性
        --local label_width = WindowTextWidth(params.pluginId, params.fontId, "WWWWWW:")
        local ypos = params.topMargin
        local xpos = params.leftMargin
        for i, v in ipairs(sortStatus) do
            --xpos = xpos + WindowText(params.pluginId, params.fontId, v.label, xpos, ypos, 0, 0, v.color1, false)
            -- 当前数值
            txt = v.val
            -- 拼接当前上限
            if v.currMax then
                txt = txt .. "/" .. v.currMax
            end
            -- 拼接最大上限
            if v.max then
                txt = txt .. "/" .. string.rpad(v.max, 3, ' ')
            end
            -- 拼接百分比
            if v.currMax then
                -- 如果存在当前上限，那么百分比显示是否达到最大上限，比如气血
                txt = txt .. " (" .. string.lpad(string.format('%u', 100 * v.currMax / v.max) .. "%", 4, ' ') .. ")"
            elseif v.max then
                -- 如果不存在当前上限，那么百分比显示当前值是否达到最大上限，比如内力
                txt = txt .. " (" .. string.lpad(string.format('%u', 100 * v.val / v.max) .. "%", 4, ' ') .. ")"
            else
                -- 如果只有当前值，比如经验，潜能
            end

            -- 整合整个属性的文字
            local txt = v.label .. "[" .. txt .. "] "

            -- 展示文本
            txtlen = WindowTextWidth(params.pluginId, params.fontId, txt)
            --outlined_text(params.pluginId, params.fontId, txt, xpos + label_width + ((bar_width - txtlen) / 2), ypos, 0, 0, 0xeeeeee)
            --[[gauge(params.pluginId, v.name, v.val, barMax,
                xpos + label_width, ypos, bar_width, params.lineHeight, -- 窗口内的位置
                v.color2, 0x000000, -- 当前填充颜色，未填充部分颜色
                5, 0x000000, --
                0x222222, nil, --边框颜色，阴影颜色
                true) -- 不使用渐进填充
            ]] --

            -- 渲染属性文字
            WindowText(params.pluginId, params.fontId, txt, xpos, ypos, 0, 0, v.color1, false)

            -- 计算下个bar的坐标
            if v.index % 3 == 0 then
                --换行时的坐标
                txtlen = WindowTextWidth(params.pluginId, params.fontId, txt)
                ypos = ypos + params.lineHeight
                xpos = params.leftMargin
            else
                xpos = xpos + WindowTextWidth(params.pluginId, params.fontId, txt) + params.leftMargin
            end
        end
    end
end

-- 函数定义 结束
---------------------------------------------------------------------------------

]]>
    </script>


</muclient>
